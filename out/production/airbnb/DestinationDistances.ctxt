#BlueJ class context
comment0.target=DestinationDistances
comment0.text=\n\ DestinationDistances\ class\ controls\ the\ main\ mathematical\ functionality\ of\ the\ calculation\ for\ the\ five\ closest\ locations\ (pubs\ or\ tourist\ attraction\ relevant\ to\ a\ propety\ selected\ by\n\ the\ user)\n\ \n\ This\ class\ creates\ an\ array\ list\ of\ DistanceDestinationPair\ ,\ adding\ all\ the\ destinations\ from\ the\ passed\ DestinationListing\ List\ and\ their\ corresponding\ calculated\ distance\n\ from\ the\ selectedProperty\ by\ the\ user.\n\ \n\ This\ class\ is\ then\ sorted\ an\ only\ the\ first\ five\ elements\ are\ returned\ which\ represent\ the\ five\ closest\ destinations\ to\ the\ selected\ property\n\n\ @author\ Adam\ Murray\ (K21003575)\n\ @author\ Augusto\ Favero\ (K21059800)\n\ @author\ Mathew\ Tran\ (K21074020)\n\ @author\ Tony\ Smith\ (K21064940)\n\ @version\ 1.0.0\n\ \n
comment1.params=filteredDestinations\ selectedProperty
comment1.target=DestinationDistances(java.util.List,\ AirbnbListing)
comment1.text=\n\ DestinationDistances\ constructor\ creates\ a\ new\ array\ list\ for\ all\ the\ destination\ and\ distance\ pairs\ for\ all\ relevant\ destinations\n\ @param\ List<DestinationListing>\ filteredDestinations,\ the\ list\ of\ filtered\ destinations\ that\ fit\ the\ user\ selected\ preferences\n\ @param\ AirbnbListing\ selectedProperty,\ the\ property\ selected\ by\ the\ user\n
comment2.params=filteredDestinations\ selectedProperty
comment2.target=void\ addDestinations(java.util.List,\ AirbnbListing)
comment2.text=\n\ The\ filtered\ destinations\ are\ iterated\ over\ and\ their\ relative\ distance\ is\ calculated\ using\ the\ selected\ property\ as\ a\ reference\ point\n\ @param\ List<DestinationListing>\ filteredDestinations,\ the\ list\ of\ filtered\ destinations\ that\ fit\ the\ user\ selected\ preferences\n\ @param\ AirbnbListing\ selectedProperty,\ the\ property\ selected\ by\ the\ user\n
comment3.params=
comment3.target=java.util.ArrayList\ getFiveSmallest()
comment3.text=\nConverts\ the\ destinations\ ArrayList<DestinationPair>\ to\ an\ array\ which\ is\ sorted\ using\ a\ merge\ sort\ and\ the\ first\ five\ elements\ in\ the\ list\ are\ retrieved.\ If\ there\ are\ less\ then\ five\ locations,\ all\ of\ them\ are\ displayed,\notherwise\ the\ first\ five\ are\ chosen\ which\ represent\ the\ five\ closest\ destinations\n@return\ ArrayList<DistanceDestinationPair>,\ containing\ the\ up\ to\ five\ closest\ destinations\ relative\ to\ the\ selected\ property\n
comment4.params=propertyLong\ venueLong\ propertyLat\ venueLat
comment4.target=int\ calculateDistance(double,\ double,\ double,\ double)
comment4.text=\n\ given\ the\ property\ and\ destination\ longitude\ and\ latitude\ calculateDistancew()\ calculates\ the\ distance\ between\ them\n\ @return\ int,\ returns\ the\ distance\ between\ the\ two\ locations\ in\ KM\ as\ an\ int\ \n
comment5.params=a\ n
comment5.target=void\ mergeSort(DistanceDestinationPair[],\ int)
comment5.text=\nMerge\ sort\ algorithm\ that\ sorts\ the\ inputed\ array\ in\ ascending\ order,\ sorting\ the\ DistanceDestinationPair\ object\ from\ shortest\ distance\ to\ longest\ distance\ \n
comment6.params=a\ l\ r\ left\ right
comment6.target=void\ merge(DistanceDestinationPair[],\ DistanceDestinationPair[],\ DistanceDestinationPair[],\ int,\ int)
numComments=7
